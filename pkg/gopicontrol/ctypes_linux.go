//go:build ignore
// +build ignore

package gopicontrol

// #cgo CFLAGS: -I${SRCDIR}/../../interface/piControl
// #include <piControlIf.h>
import "C"

type SDeviceInfo C.struct_SDeviceInfoStr

type SEntryInfo C.struct_SEntryInfoStr

type SPIValue C.struct_SPIValueStr

type SPIVariable C.struct_SPIVariableStr

type SDIOResetCounter C.struct_SDIOResetCounterStr

const (
	PICONTROL_DEVICE               = C.PICONTROL_DEVICE
	KB_RESET                       = C.KB_RESET
	KB_GET_DEVICE_INFO             = C.KB_GET_DEVICE_INFO
	KB_GET_DEVICE_INFO_LIST        = C.KB_GET_DEVICE_INFO_LIST
	KB_GET_VALUE                   = C.KB_GET_VALUE
	KB_SET_VALUE                   = C.KB_SET_VALUE
	KB_FIND_VARIABLE               = C.KB_FIND_VARIABLE
	KB_DIO_RESET_COUNTER           = C.KB_DIO_RESET_COUNTER
	KB_UPDATE_DEVICE_FIRMWARE      = C.KB_UPDATE_DEVICE_FIRMWARE
	KB_GET_LAST_MESSAGE            = C.KB_GET_LAST_MESSAGE
	KB_INTERN_IO_MSG               = C.KB_INTERN_IO_MSG
	KB_WAIT_FOR_EVENT              = C.KB_WAIT_FOR_EVENT
	PICONTROL_NOT_CONNECTED        = C.PICONTROL_NOT_CONNECTED
	PICONTROL_NOT_CONNECTED_MASK   = C.PICONTROL_NOT_CONNECTED_MASK
	PICONTROL_SW_MODBUS_TCP_SLAVE  = C.PICONTROL_SW_MODBUS_TCP_SLAVE
	PICONTROL_SW_MODBUS_RTU_SLAVE  = C.PICONTROL_SW_MODBUS_RTU_SLAVE
	PICONTROL_SW_MODBUS_TCP_MASTER = C.PICONTROL_SW_MODBUS_TCP_MASTER
	PICONTROL_SW_MODBUS_RTU_MASTER = C.PICONTROL_SW_MODBUS_RTU_MASTER
	//ENODEV            = C.ENODEV
)
